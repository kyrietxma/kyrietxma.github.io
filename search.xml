<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HTML文件怎么引入高德地图]]></title>
    <url>%2Fkyrietxma.github.io%2F2019%2F03%2F14%2FHTML%E6%96%87%E4%BB%B6%E6%80%8E%E4%B9%88%E5%BC%95%E5%85%A5%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[1.首先，注册高德地图开发者，这个直接在官网上注册，输入必要信息就行，如下：2.注册完成后，进入个人中心，依次点击“应用管理”-&gt;“我的应用”-&gt;“创建新应用”，如下，这里输入应用名称，选择类型就行： 3 接着就需要为应用添加key值，点击右上角的+号，就会弹出添加窗口，这里我们选择“Web端（JS API）”，如下：4 添加key值成功后，就会在应用列表中看到刚才添加的key值，如下，后面的代码中需要用到这个key值：5.最后就是编写代码，在html页面中引入3D地图了，如下，代码很简单，主要是创建div容器，然后通过JS引入地图到这个容器中，这里需要JS API版本在1.4.0以上，指定地图模式为3D，key值替换成自己应用的key值： 12345678910111213141516171819202122232425262728293031323334&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no, width=device-width&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://a.amap.com/jsapi_demos/static/demo-center/css/demo-center.css&quot; /&gt; &lt;style&gt; html, body, #container &#123; width: 100%; height: 100%; &#125; &lt;/style&gt; &lt;title&gt;地图加载完成&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;&lt;script src=&quot;https://webapi.amap.com/maps?v=1.4.13&amp;key=你的key值&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://a.amap.com/jsapi_demos/static/demo-center/js/demoutils.js&quot;&gt;&lt;/script&gt;&lt;script&gt; var map = map = new AMap.Map(&apos;container&apos;, &#123; resizeEnable: true, viewMode:&apos;3D&apos; &#125;); map.on(&quot;complete&quot;, function()&#123; log.success(&quot;地图加载完成！&quot;); &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 6 浏览效果如图：]]></content>
      <tags>
        <tag>JS 高德地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何利用IDEA上传项目到Github]]></title>
    <url>%2Fkyrietxma.github.io%2F2019%2F03%2F14%2FIDEA%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0Github%2F</url>
    <content type="text"><![CDATA[第一种情况： 新的项目第一次推送到Github步骤：① 选择 share project on Github② 添加仓库名，添加描述③ 选择你要放到GitHub上的文件（大部分是选择你修改过的文件，但是本次我是第一次发布项目，所以全选）④ 显示上传成功⑤ 登录个人GitHub账号，查看项目 第二种情况：GitHub中已经有了项目，在IDEA中修改了项目中的代码，更新GitHub中的代码 ① 修改代码： 对于修改了的代码，IDEA会自动显示为不同颜色，比如新建的文件，文件名显示红色；修改了已有文件中的代码，被修改部分显示绿色② 修改完代码后，重新上传代码： 在项目上传的过程中，我们遵从添加到本地仓库–&gt;提交和推到远程仓库的步骤 A 添加到本地仓库： 右键项目名，选择Git,点击Add:添加项目到本地仓库，具体步骤如下图： 成功添加到本地仓库： B 提交并推送代码到远程仓库： 右键项目名，选择Git，点击Commit directory 具体操作如下： ③ 在个人GitHub中查看项目的更新情况 代码更新成功！！至此，关于使用IDEA上传代码的操作已经完成。]]></content>
      <tags>
        <tag>GitHub  IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[批量查询全过程]]></title>
    <url>%2Fkyrietxma.github.io%2F2019%2F03%2F13%2F%E6%89%B9%E9%87%8F%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[具体步骤如下：1 controller层（查询开始的接口） ① 调用UserService查询用户列表 ② 调用RoleService查询当前用户所拥有的角色list123456789101112131415@RequestMapping(&quot;listUser&quot;) public String list(Model model) &#123; //查询用户 List&lt;User&gt; user = userService.list(); model.addAttribute(&quot;user&quot;, user); //用户角色对应map Map&lt;User, List&lt;Role&gt;&gt; user_roles = new HashMap&lt;&gt;(); for (User user : user) &#123; //获得当前用户所拥有的角色list List&lt;Role&gt; roles = roleService.listRoles(user); user_roles.put(user, roles); &#125; model.addAttribute(&quot;user_roles&quot;, user_roles); return &quot;listUser&quot;; &#125; 2 调用UserService查询用户，返回一个用户list，具体实现在它的实现层中，代码如下：① 调用UserMapper层从数据库进行查询123456789@Override public List&lt;User&gt; list() &#123; //相当于用户的一个工具类，设置查询结果list的排序规则 UserExample example = new UserExample(); //当前查询到的用户按降序排序 example.setOrderByClause(&quot;id desc&quot;); return userMapper.selectByExample(example); &#125; 3 UserMapper层的方法如下：返回一个用户list 1List&lt;User&gt; selectByExample(UserExample example); 4 UserMapper.xml具体如下： 123456789101112131415&lt;select id=&quot;selectByExample&quot; parameterType=&quot;com.how2java.pojo.UserExample&quot; resultMap=&quot;BaseResultMap&quot;&gt; select &lt;if test=&quot;distinct&quot;&gt; distinct &lt;/if&gt; &apos;false&apos; as QUERYID, &lt;include refid=&quot;Base_Column_List&quot; /&gt; from user &lt;if test=&quot;_parameter != null&quot;&gt; &lt;include refid=&quot;Example_Where_Clause&quot; /&gt; &lt;/if&gt; &lt;if test=&quot;orderByClause != null&quot;&gt; order by $&#123;orderByClause&#125; &lt;/if&gt; &lt;/select&gt;]]></content>
      <tags>
        <tag>批量查询</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fkyrietxma.github.io%2F2019%2F03%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[shiro学习记录]]></title>
    <url>%2Fkyrietxma.github.io%2F2019%2F01%2F16%2Fshiro%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1 登录的用户对象，封装成一个token对象2 根据SecurityUtils获得一个subject对象，再调用subject的login(token)方法进行登录，如果正常登陆（执行subject.login(token)成功，就能在全局通过SecurityUtils.getSubject().getPrincipal()获取用户信息。3 MD5加密： 12String password=&quot;123&quot;;String MD5password = new Md5Hash(password).toString(); 4 对原有密码添加盐值 1234//加盐值（随机数）String salt = new SecureRandomNumberGenerator().nextBytes().toString();//加盐值后的密码newPassword = new SimpleHash(algorithmName, password, salt).toString(); SSM集成shiro 1 web.xml做以下几件事件事：① 指定spring的配置文件有两个，分别是用于链接数据库的applicationContext.xml和用于配置shiro的applicationContext-shiro.xml② 指定springmvc的配置文件：springMVC.xml③ 使用shiro过滤器 1&lt;filter-class&gt;org.springframework.web.filter.Delegating&lt;/filter-class&gt; 具体代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt; &lt;!-- spring的配置文件--&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt; classpath:applicationContext.xml, classpath:applicationContext-shiro.xml &lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!-- spring mvc核心：分发servlet --&gt; &lt;servlet&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- spring mvc的配置文件 --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;!-- Shiro配置 --&gt; &lt;filter&gt; &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;/web-app&gt; 2 applicationContext.xml 配置数据库和mybatis的扫描mapper 12345678910111213141516171819202122232425262728&lt;context:annotation-config /&gt; &lt;context:component-scan base-package=&quot;com.how2java.service&quot; /&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt; &lt;property name=&quot;driverClassName&quot;&gt; &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt; &lt;/property&gt; &lt;property name=&quot;url&quot;&gt; &lt;value&gt;jdbc:mysql://localhost:3306/shiro?characterEncoding=UTF-8&lt;/value&gt; &lt;/property&gt; &lt;property name=&quot;username&quot;&gt; &lt;value&gt;root&lt;/value&gt; &lt;/property&gt; &lt;property name=&quot;password&quot;&gt; &lt;value&gt;admin&lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id=&quot;sqlSession&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.how2java.pojo&quot; /&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:com/how2java/mapper/*.xml&quot;/&gt; &lt;/bean&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;property name=&quot;basePackage&quot; value=&quot;com.how2java.mapper&quot;/&gt; &lt;/bean&gt; 3 applicationContext-shiro.xml 提供shiro的相关配置 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;!-- 配置shiro的过滤器工厂类，id- shiroFilter要和我们在web.xml中配置的过滤器一致 --&gt; &lt;bean id=&quot;shiroFilter&quot; class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt; &lt;!-- 调用我们配置的权限管理器 --&gt; &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot; /&gt; &lt;!-- 配置我们的登录请求地址 --&gt; &lt;property name=&quot;loginUrl&quot; value=&quot;/login&quot; /&gt; &lt;!-- 如果您请求的资源不再您的权限范围，则跳转到/403请求地址 --&gt; &lt;property name=&quot;unauthorizedUrl&quot; value=&quot;/unauthorized&quot; /&gt; &lt;!-- 退出 --&gt; &lt;property name=&quot;filters&quot;&gt; &lt;util:map&gt; &lt;entry key=&quot;logout&quot; value-ref=&quot;logoutFilter&quot; /&gt; &lt;/util:map&gt; &lt;/property&gt; &lt;!-- 权限配置 --&gt; &lt;property name=&quot;filterChainDefinitions&quot;&gt; &lt;value&gt; &lt;!-- anon表示此地址不需要任何权限即可访问 --&gt; /login=anon /index=anon /static/**=anon /doLogout=logout &lt;!--所有的请求(除去配置的静态资源请求或请求地址为anon的请求)都要通过登录验证,如果未登录则跳到/login --&gt; /** = authc &lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 退出过滤器 --&gt; &lt;bean id=&quot;logoutFilter&quot; class=&quot;org.apache.shiro.web.filter.authc.LogoutFilter&quot;&gt; &lt;property name=&quot;redirectUrl&quot; value=&quot;/index&quot; /&gt; &lt;/bean&gt; &lt;!-- 会话ID生成器 --&gt; &lt;bean id=&quot;sessionIdGenerator&quot; class=&quot;org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator&quot; /&gt; &lt;!-- 会话Cookie模板 关闭浏览器立即失效 --&gt; &lt;bean id=&quot;sessionIdCookie&quot; class=&quot;org.apache.shiro.web.servlet.SimpleCookie&quot;&gt; &lt;constructor-arg value=&quot;sid&quot; /&gt; &lt;property name=&quot;httpOnly&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;maxAge&quot; value=&quot;-1&quot; /&gt; &lt;/bean&gt; &lt;!-- 会话DAO --&gt; &lt;bean id=&quot;sessionDAO&quot; class=&quot;org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO&quot;&gt; &lt;property name=&quot;sessionIdGenerator&quot; ref=&quot;sessionIdGenerator&quot; /&gt; &lt;/bean&gt; &lt;!-- 会话验证调度器，每30分钟执行一次验证 ，设定会话超时及保存 --&gt; &lt;bean name=&quot;sessionValidationScheduler&quot; class=&quot;org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler&quot;&gt; &lt;property name=&quot;interval&quot; value=&quot;1800000&quot; /&gt; &lt;property name=&quot;sessionManager&quot; ref=&quot;sessionManager&quot; /&gt; &lt;/bean&gt; &lt;!-- 会话管理器 --&gt; &lt;bean id=&quot;sessionManager&quot; class=&quot;org.apache.shiro.web.session.mgt.DefaultWebSessionManager&quot;&gt; &lt;!-- 全局会话超时时间（单位毫秒），默认30分钟 --&gt; &lt;property name=&quot;globalSessionTimeout&quot; value=&quot;1800000&quot; /&gt; &lt;property name=&quot;deleteInvalidSessions&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;sessionValidationSchedulerEnabled&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;sessionValidationScheduler&quot; ref=&quot;sessionValidationScheduler&quot; /&gt; &lt;property name=&quot;sessionDAO&quot; ref=&quot;sessionDAO&quot; /&gt; &lt;property name=&quot;sessionIdCookieEnabled&quot; value=&quot;true&quot; /&gt; &lt;property name=&quot;sessionIdCookie&quot; ref=&quot;sessionIdCookie&quot; /&gt; &lt;/bean&gt; &lt;!-- 安全管理器 --&gt; &lt;bean id=&quot;securityManager&quot; class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt; &lt;property name=&quot;realm&quot; ref=&quot;databaseRealm&quot; /&gt; &lt;property name=&quot;sessionManager&quot; ref=&quot;sessionManager&quot; /&gt; &lt;/bean&gt; &lt;!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) --&gt; &lt;bean class=&quot;org.springframework.beans.factory.config.MethodInvokingFactoryBean&quot;&gt; &lt;property name=&quot;staticMethod&quot; value=&quot;org.apache.shiro.SecurityUtils.setSecurityManager&quot; /&gt; &lt;property name=&quot;arguments&quot; ref=&quot;securityManager&quot; /&gt; &lt;/bean&gt; &lt;bean id=&quot;databaseRealm&quot; class=&quot;com.how2java.realm.DatabaseRealm&quot;&gt; &lt;/bean&gt; &lt;!-- 保证实现了Shiro内部lifecycle函数的bean执行 --&gt; &lt;bean id=&quot;lifecycleBeanPostProcessor&quot; class=&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot; /&gt;&lt;/beans&gt; 4 springMVC.xml基本配置、增加了对shiro的支持、指定了异常处理类 12345678910&lt;!--启用shiro注解 --&gt; &lt;bean class=&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot; depends-on=&quot;lifecycleBeanPostProcessor&quot;&gt; &lt;property name=&quot;proxyTargetClass&quot; value=&quot;true&quot; /&gt; &lt;/bean&gt; &lt;bean class=&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;&gt; &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot; /&gt; &lt;/bean&gt; 5 log4j.properties 日配置文件 12345678# Global logging configurationlog4j.rootLogger=ERROR, stdout# MyBatis logging configuration...log4j.logger.com.how2java=TRACE# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 6 登录方法 123456789101112131415@RequestMapping(value=&quot;/login&quot;,method=RequestMethod.POST) public String login(Model model,String name, String password) &#123; Subject subject = SecurityUtils.getSubject(); UsernamePasswordToken token = new UsernamePasswordToken(name, password); try &#123; subject.login(token); Session session=subject.getSession(); session.setAttribute(&quot;subject&quot;, subject); return &quot;redirect:index&quot;; &#125; catch (AuthenticationException e) &#123; model.addAttribute(&quot;error&quot;, &quot;验证失败&quot;); return &quot;login&quot;; &#125; &#125;]]></content>
      <tags>
        <tag>个人学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot项目使用mybatis逆向工程生成代码]]></title>
    <url>%2Fkyrietxma.github.io%2F2019%2F01%2F14%2Fspringboot%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[第一次写博客，权当是对自己学习的记录！！！ 开发工具 eclipse 数据库mysql 1 先简单说一下eclipse中如何使用mybatis的逆向工程来快速生成代码 利用eclipse搭建springboot项目的前提是eclipse安装了Spring插件，具体如下：help–&gt;eclipse marketplace 在也页面中输入Spring搜索后install当前插件并重启eclipse 2 在创建springboot项目的时候，选择 点击finish完成项目创建 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.kyrie&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;mybatis-generator&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;!-- mybatis-generator 插件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;configuration&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 在项目的pom.xml文件中引入mybatis的generator插件 3 下面配置两个重要的配置文件， ① 第一个是springboot项目的全局变量：application.yml 在配置application.yml文件的时候需要注意冒号后面的空格 123456789101112spring: datasource: driver-class-name: com.mysql.jdbc.Driver //mysql数据库驱动 url: jdbc:mysql://127.0.0.1:3306/newtest //数据库名 username: root password: rootserver: port: 8081#mybatis的配置mybatis: mapper-locations: classpath:mapper/*.xml type-aliases-package: com.kyrie.matx.entity ② 第二个重要的配置文件是generator的配置文件generatorConfig.xml 该配置文件中配置代码生成的具体策略，详细信息如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;properties resource=&quot;application.yml&quot; /&gt; &lt;!-- mysql驱动的位置 这个是MySQL连接的jar包，你需要指定你自己计算机上的jar包的位置--&gt; &lt;classPathEntry location=&quot;C:/Users/tengxiao.ma/.m2/repository/mysql/mysql-connector-java/5.1.46/mysql-connector-java-5.1.46.jar&quot; /&gt; &lt;context id=&quot;Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;commentGenerator&gt; &lt;!-- 是否生成注释代时间戳 --&gt; &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt; &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt; &lt;/commentGenerator&gt; &lt;!-- JDBC连接 其中connectionURL后面的newtest改为你创建的数据库，紧跟在后面是数据库连接的账户和密码--&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost:3306/newtest&quot; userId=&quot;root&quot; password=&quot;root&quot;&gt; &lt;/jdbcConnection&gt; &lt;!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制--&gt; &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal --&gt; &lt;javaTypeResolver&gt; &lt;!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） --&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt; &lt;/javaTypeResolver&gt; &lt;!-- 生成实体类地址 这里需要你改动，其中targetPackage需要根据你自己创建的目录进行改动 --&gt; &lt;javaModelGenerator targetPackage=&quot;com.kyrie.matx.entity&quot; targetProject=&quot;src/main/java&quot;&gt; &lt;!-- 从数据库返回的值被清理前后的空格 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;/javaModelGenerator&gt; &lt;!-- 生成mapper xml文件 这里不需要改动 --&gt; &lt;sqlMapGenerator targetPackage=&quot;mapper&quot; targetProject=&quot;src/main/resources&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 生成mapper xml对应Client 这里需要改动targetPackage，依据你自己的工程--&gt; &lt;javaClientGenerator targetPackage=&quot;com.kyrie.matx.dao&quot; targetProject=&quot;src/main/java&quot; type=&quot;XMLMAPPER&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;/javaClientGenerator&gt; &lt;!-- 配置表信息 --&gt; &lt;!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample 是否生成 example类 个人觉得生成那么多的example类很繁琐，因此设置为false--&gt; &lt;table schema=&quot;newtest&quot; tableName=&quot;category&quot; domainObjectName=&quot;Category&quot; enableCountByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;&gt; &lt;/table&gt; &lt;table schema=&quot;newtest&quot; tableName=&quot;product&quot; domainObjectName=&quot;Product&quot; enableCountByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 4 运行generator，完成代码的自动生成 右击项目名：Run as–&gt;maven build,在Goals:mybatis-generator：generate 如下 apply–&gt;run 5 运行结果如下表示代码生成成功，但是在当前的页面是看不到的，需要删除项目（不要删除工作空间的项目），之后import这个maven项目6 完成这一系列工作之后，项目的具体结构如下：]]></content>
      <tags>
        <tag>个人笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人github练习]]></title>
    <url>%2Fkyrietxma.github.io%2F2019%2F01%2F09%2F%E4%B8%AA%E4%BA%BAgithub%E7%BB%83%E4%B9%A0%2F</url>
    <content type="text"></content>
      <tags>
        <tag>是不是跟github链接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好，2019]]></title>
    <url>%2Fkyrietxma.github.io%2F2019%2F01%2F09%2F%E4%BD%A0%E5%A5%BD%EF%BC%8C2019%2F</url>
    <content type="text"></content>
      <tags>
        <tag>你好，2019 新的一年，要有新的成长</tag>
      </tags>
  </entry>
</search>
